import string
import random
import base64
from cryptography.fernet import Fernet
from db.creds import AdminCredentials
chars_to_use = string.ascii_letters + string.digits

encode_value = lambda value: base64.b64encode(str(value).encode("utf-8")).decode("utf-8")
decode_value = lambda value: base64.b64decode(str(value).encode("utf-8")).decode("utf-8")


def verify_admin_creds(username, password):
    """Verify admin credentials.

    Args:
        username (str): admin username
        password (str): admin password

    Returns:
        bool: Verification status.
    """
    if username != AdminCredentials.username:
        return False
    fernet_cipher = Fernet(AdminCredentials.fernet_key)
    if password != fernet_cipher.decrypt(AdminCredentials.encrypted_password.encode()).decode():
        return False
    return True

def generate_random_string(length):
    """Generate random string using letters and digits of given length.

    Args:
        length (int): Expected length of generated string.

    Returns:
        str: generated string
    """
    return "".join(random.choices(chars_to_use, k=length))


def generate_account_id(name, length=16):
    """Generate account id and transform it using name.

    Args:
        name (str): Username.
        length (int): Expected length of account id.

    Returns:
        str: generated unique account id.
    """
    gen_acc_id = generate_random_string(length)
    mixed_id = ""
    i = 0
    for c in gen_acc_id:
        mixed_id += c + name[i]
        i = (i+1) % len(name)
    mixed_id = mixed_id[:length] + mixed_id[length:][::-1]
    return mixed_id

def generate_access_token(account_id, length=48):

    def transform_range(value):
        old_min, old_max = 48, 122
        new_max, new_min = 90, 65
        return int(( (value - old_min) / (old_max - old_min) ) * (new_max - new_min) + new_min)
    
    def compute_average_of_string(s1):
        ids = [ord(c) for c in s1]
        return chr(transform_range(sum(ids) // len(ids)))
    
    chunk_size = 4
    compressed_acc_id = ""
    for i in range(0, len(account_id), chunk_size):
        compressed_acc_id += (
            compute_average_of_string(account_id[i: i+chunk_size-1]) + \
            random.choice(chars_to_use) + \
            compute_average_of_string(account_id[i+1: i+chunk_size])
        )

    gen_random_token = generate_random_string(24)
    access_token = ""
    for i in range(len(gen_random_token)):
        access_token += gen_random_token[i] + compressed_acc_id[i]

    return access_token 


def compute_page_offset_from_token(token):
    """Compute page offset from given page token.

    Args:
        token (str): Encoded page token.

    Returns:
        str or int: Page offset or error message.
    """
    try:
        val = decode_value(token)
        if not val.isdigit():
            return "Invalid page token provided."
        return int(val)
    except Exception:
        return "Invalid page token provided."
    
