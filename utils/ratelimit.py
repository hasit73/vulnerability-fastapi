import asyncio

BUCKETS = {}
class TokenBucket:
    """Tokenbucket mechnism used to handle rate limiting."""
    NUMBER_OF_MAX_CALLS = 100

    def __init__(self) -> None:
        """Create Tokenbucket object."""
        self.available_calls = self.NUMBER_OF_MAX_CALLS

    @classmethod
    def update_token_bucket(cls):
        """Update all bucket objects."""    
        for token_obj in BUCKETS.values():
            token_obj.available_calls = cls.NUMBER_OF_MAX_CALLS

    def decrement_calls(self):
        """Decrement available calls for bucket."""
        self.available_calls = max(self.available_calls - 1, 0)


async def add_calls_to_buckets():
    """Continuosly add max api calls to each bucket."""
    while True:
        TokenBucket.update_token_bucket()
        await asyncio.sleep(60*60)
