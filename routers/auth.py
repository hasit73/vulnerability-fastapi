from fastapi import APIRouter, Body, Header, HTTPException
from fastapi.responses import JSONResponse
from utils import util
from utils import objects
from db import db_manager as dm
from db.actions import AccountActions

auth_api = APIRouter()

db_manager = dm.DatabaseManager("accounts.sqlite")

@auth_api.on_event("startup")
async def startup():
    await db_manager.connect()
    await AccountActions.setup(db_manager)

@auth_api.on_event("shutdown")
async def shutdown():
    await db_manager.disconnect()

async def verify_access_token(access_token = Header(...)):
    """Verify access token present in header is valid or not.

    Args:
        access_token (str, optional): Provide access_token in headers.

    Raises:
        HTTPException: Returns 401 status code with Invalid access token.
    """
    message = await AccountActions.verify_token_exists(db_manager, values={"access_token": access_token})
    if message:
        raise HTTPException(status_code=401, detail=message)


@auth_api.post("/create-account")
async def create_api_account(name, admin: objects.AdminLoginCreds):
    """Create a new account.

    Args:
        name (str): Username for new account.
        admin (objects.AdminLoginCreds): Admin creds schema.

    Raises:
        HTTPException: Status code = 401, Invalid admin credentials provided to create new account.
        HTTPException: Status code = 400, Account already exists for given username.
        HTTPException: Status code = 500, Failed to create account id.

    Returns:
        dict: generated account id.
    """
    try:
        # Verify admin credentials.
        verify_status = util.verify_admin_creds(admin.username, admin.password)
        if not verify_status:
            return JSONResponse(status_code=401, content={"message": "Invalid admin credentials provided to create new account."})
        
        # Check if provided username already exists in db.
        is_user_exists = await AccountActions.check_user_exists(db_manager, values={"name": name})
        if len(is_user_exists) > 0:
            is_user_exists = is_user_exists[0][0]
        if is_user_exists:
            return JSONResponse(status_code=400, content={"message": "Account already exists for given username."})

        acc_id = util.generate_account_id(name)
        await AccountActions.add_user(db_manager, values=[{"account_id": acc_id, "username": name}])
        return {"account_id": acc_id, "success": True}
    
    except Exception as ex:
        return JSONResponse(status_code=500, content={"message": "Failed to create account id."})


@auth_api.post("/create-access-token")
async def create_access_token(account_id = Body(..., embed=True)):
    """Create access token for provided account id.

    Args:
        acount_id (str): Account id of user.

    Raises:
        HTTPException: Status code = 401, Invalid account id provided.
        HTTPException: Status code = 500, Failed to generate access token.

    Returns:
        dict: generated access token.
    """
    try:
        is_account_exists = await AccountActions.check_account_id_exists(db_manager, values={"account_id": account_id})
        
        if len(is_account_exists) > 0:
            is_account_exists = is_account_exists[0][0]
        if not is_account_exists:
            return JSONResponse(status_code=401, content={"message": "Invalid account id provided."})

        access_token = util.generate_access_token(account_id)
        await AccountActions.update_access_token(db_manager, values=[{"account_id": account_id, "access_token": access_token}])
        return {"token": access_token}
    except Exception:
        return JSONResponse(status_code=500, content={"message": "Failed to generate access token."})

