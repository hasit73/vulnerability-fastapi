from databases import Database

class DatabaseManager:
    """Class to manage db CRUD operations."""

    def __init__(self, filename) -> None:
        """Create object of DatabaseManager for specific db.

        Args:
            filename (str): db file path. 
        """
        self.db_filename = filename
        self.session = Database(f'sqlite+aiosqlite:///{self.db_filename}')
    
    async def connect(self):
        """Make connection to db."""
        await self.session.connect()
    
    async def disconnect(self):
        """Abort connection to db."""
        await self.session.disconnect()
    
    async def execute_query(self, query, values=None):
        """Execute given query (insert, update).

        Args:
            query (str): Query to execute
            values (dict, optional): Query binding values. Defaults to None.

        Returns:
            None: None
        """
        if values is not None:
            return await self.session.execute_many(query=query, values=values)
        return await self.session.execute(query=query)
    
    async def fetch_records(self, query, values=None):
        """Execute given query to fetch records.

        Args:
            query (str): Query to execute
            values (dict, optional): Query binding values. Defaults to None.

        Returns:
            list: List of records.
        """
        if values is not None:
            return await self.session.fetch_all(query=query, values=values)
        return await self.session.fetch_all(query=query)
