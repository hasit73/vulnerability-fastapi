from db.queries import AUTH_QUERIES, VULNERABILITIES_RETRIEVAL_QUERIES as VR_QUERIES
from db.creds import Settings

class AccountActions:
    """Class that handle all db operations for Auth module."""
    @classmethod
    async def setup(cls, db_manager):
        """Handle initial setup (Creating table if not exists)."""
        await db_manager.execute_query(AUTH_QUERIES.CREATE_TABLE)
    
    @classmethod
    async def add_user(cls, db_manager, values):
        """Create account for new user."""
        return await db_manager.execute_query(AUTH_QUERIES.ADD_ACCOUNT, values=values)

    @classmethod
    async def check_user_exists(cls, db_manager, values):
        """Check if username exists or not."""
        return await db_manager.fetch_records(AUTH_QUERIES.CHECK_USER_EXISTS, values=values)

    @classmethod
    async def check_account_id_exists(cls, db_manager, values):
        """Check if account exists or not."""
        return await db_manager.fetch_records(AUTH_QUERIES.CHECK_ACCOUNT_EXISTS, values=values)

    @classmethod
    async def update_access_token(cls, db_manager, values):
        """Update access token of specified account."""
        return await db_manager.execute_query(AUTH_QUERIES.UPDATE_ACCESS_TOKEN, values=values)

    @classmethod
    async def verify_token_exists(cls, db_manager, values):
        """Verify access token valid or its expiry time."""
        data = await db_manager.fetch_records(AUTH_QUERIES.CHECK_ACCESS_TOKEN_EXISTS, values=values)
        if len(data) == 0:
            return Settings.INVALID_TOKEN_MESSAGE
        timediff = data[0][0]
        if timediff > Settings.ACCESS_TOKEN_EXPIRY_TIME:
            return Settings.EXPIRY_TOKEN_MESSAGE
        return ""

class VulnerabilityRetrievalActions:
    """Class that handle all db operations for Vulnerability Retrieval module."""

    @classmethod
    async def fetch_vulnerabilities(cls, db_manager, values):
        """Retrieve all vulnerabilities by executing query."""    
        return await db_manager.fetch_records(VR_QUERIES.GET_VULNERABIITIES, values=values)

    @classmethod
    async def fetch_vulnerabilities_by_filters(cls, db_manager, values, filter_query):
        """Retrieve all vulnerabilities by executing query."""    
        return await db_manager.fetch_records(filter_query, values=values)

    @classmethod
    async def fetch_affected_devices_by_cve_id(cls, db_manager, values):
        """Fetch affected devices by cve_id."""
        return await db_manager.fetch_records(VR_QUERIES.GET_AFFECTED_DEVICES_FOR_CVE_ID, values=values)
